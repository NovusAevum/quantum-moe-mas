# Advanced Security Scanning Pipeline
# Comprehensive security analysis with OWASP compliance

name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run comprehensive security scan weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:  # Manual trigger

env:
  PYTHON_VERSION: '3.11'

jobs:
  # SAST (Static Application Security Testing)
  sast-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install semgrep
    
    # Bandit - Python security linter
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-results.json
        bandit -r src/ -f sarif -o bandit-results.sarif
      continue-on-error: true
    
    # Safety - Python dependency vulnerability scanner
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-results.json
        safety check --output safety-results.txt
      continue-on-error: true
    
    # Semgrep - Multi-language static analysis
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
        generateSarif: "1"
    
    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"
    
    # Upload security reports
    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          bandit-results.sarif
          safety-results.json
          safety-results.txt
        retention-days: 30

  # Dependency Analysis
  dependency-analysis:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install pip-audit
      run: pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-results.json
        pip-audit --format=cyclonedx-json --output=sbom.json
      continue-on-error: true
    
    # OWASP Dependency Check
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'quantum-moe-mas'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: Upload OWASP Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif
    
    - name: Upload dependency artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-analysis-results
        path: |
          pip-audit-results.json
          sbom.json
          reports/
        retention-days: 30

  # Container Security Scanning (Disabled temporarily)
  # container-security:
  #   name: Container Security Scan
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   
  #   - name: Build Docker image
  #     run: |
  #       docker build -t quantum-moe-mas:security-scan .
  #   
  #   # Trivy container vulnerability scanner
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'quantum-moe-mas:security-scan'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  #   
  #   - name: Upload Trivy scan results
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: 'trivy-results.sarif'
  #   
  #   # Docker Scout (if available)
  #   - name: Docker Scout CVE scan
  #     uses: docker/scout-action@v1
  #     if: github.event_name == 'pull_request'
  #     with:
  #       command: cves
  #       image: quantum-moe-mas:security-scan
  #       sarif-file: scout-results.sarif
  #       summary: true
  #   
  #   - name: Upload Scout results
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: github.event_name == 'pull_request'
  #     with:
  #       sarif_file: scout-results.sarif

  # Infrastructure Security (Kubernetes manifests)
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Checkov - Infrastructure as Code security scanner
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: kubernetes,dockerfile,yaml
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
        soft_fail: true
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
    
    # Kubesec - Kubernetes security scanner
    - name: Run Kubesec scan
      run: |
        curl -sSX POST --data-binary @k8s/namespace.yaml https://v2.kubesec.io/scan > kubesec-namespace.json
        if [ -f k8s/deployment.yaml ]; then
          curl -sSX POST --data-binary @k8s/deployment.yaml https://v2.kubesec.io/scan > kubesec-deployment.json
        fi
      continue-on-error: true
    
    - name: Upload infrastructure security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-security-results
        path: |
          checkov-results.sarif
          kubesec-*.json
        retention-days: 30

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # TruffleHog - Secrets scanner
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    # GitLeaks - Git secrets scanner
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-analysis, infrastructure-security, secrets-scan]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> security-summary.md
        echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> security-summary.md
        echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Artifacts Generated" >> security-summary.md
        find . -name "*.json" -o -name "*.sarif" -o -name "*.txt" | sort >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90
    
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${summary}`
          });

  # Security Policy Compliance Check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check security policy compliance
      run: |
        echo "Checking OWASP Top 10 compliance..."
        
        # Check for security headers in web configuration
        if [ -f "config/nginx.conf" ]; then
          echo "✓ Nginx configuration found"
          grep -q "X-Frame-Options" config/nginx.conf && echo "✓ X-Frame-Options header configured" || echo "❌ X-Frame-Options header missing"
          grep -q "X-Content-Type-Options" config/nginx.conf && echo "✓ X-Content-Type-Options header configured" || echo "❌ X-Content-Type-Options header missing"
          grep -q "Strict-Transport-Security" config/nginx.conf && echo "✓ HSTS header configured" || echo "❌ HSTS header missing"
        fi
        
        # Check for security configurations in application
        if [ -f "src/quantum_moe_mas/security/__init__.py" ]; then
          echo "✓ Security module found"
        else
          echo "❌ Security module missing"
        fi
        
        # Check for environment variable validation
        if grep -r "os.environ" src/ | grep -v "get.*default"; then
          echo "❌ Unsafe environment variable access found"
        else
          echo "✓ Safe environment variable access"
        fi
        
        echo "Compliance check completed"