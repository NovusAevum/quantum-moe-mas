# Comprehensive CI/CD Pipeline for Quantum MoE MAS
# Multi-stage pipeline with security scanning, testing, and quality checks

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Code Quality and Security Scanning
  quality-gate:
    name: Quality Gate & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Code formatting check (Black)
      run: black --check --diff src/ tests/
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/ tests/
    
    - name: Linting (Flake8)
      run: flake8 src/ tests/ --statistics --tee --output-file=flake8-report.txt
    
    - name: Type checking (MyPy)
      run: mypy src/ --junit-xml=mypy-report.xml
    
    - name: Security scan (Bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
    
    - name: Dependency vulnerability scan (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Secrets detection
      uses: Yelp/detect-secrets-action@v1.4.0
      with:
        args: '--scan --all-files --force-use-all-plugins'
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          flake8-report.txt
          mypy-report.xml
        retention-days: 30

  # Stage 2: Unit and Integration Testing
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        test-type: ['unit', 'integration']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_quantum_moe_mas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ -v \
          --cov=src/quantum_moe_mas \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=junit-unit.xml \
          --cov-fail-under=80
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_quantum_moe_mas
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ -v \
          --junit-xml=junit-integration.xml \
          --timeout=300
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_quantum_moe_mas
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          junit-*.xml
          htmlcov/
          coverage.xml
        retention-days: 30
    
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Stage 3: Performance and Load Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-suite
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark locust
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ -v \
          --benchmark-json=benchmark-results.json \
          --benchmark-min-rounds=5
    
    - name: Load testing with Locust
      run: |
        # Start the application in background
        python -m quantum_moe_mas.api &
        sleep 10
        
        # Run load tests
        locust -f tests/load/locustfile.py \
          --host=http://localhost:8000 \
          --users=50 \
          --spawn-rate=5 \
          --run-time=2m \
          --html=load-test-report.html \
          --headless
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          benchmark-results.json
          load-test-report.html
        retention-days: 30

  # Stage 4: Container Build and Security Scan
  container-security:
    name: Container Build & Security
    runs-on: ubuntu-latest
    needs: test-suite
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Push Docker image
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  # Stage 5: Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [performance-tests, container-security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/staging/
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/staging/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/quantum-moe-mas -n quantum-moe-mas --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=quantum-moe-mas -n quantum-moe-mas --timeout=300s
        
        # Get service URL
        STAGING_URL=$(kubectl get service quantum-moe-mas -n quantum-moe-mas -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run smoke tests
        curl -f http://$STAGING_URL/health || exit 1
        python tests/smoke/test_staging.py --url=http://$STAGING_URL

  # Stage 6: Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Blue-Green Deployment
      run: |
        # Update image tag in production manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/production/
        
        # Deploy to green environment
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/production/green/
        
        # Wait for green deployment
        kubectl rollout status deployment/quantum-moe-mas-green -n quantum-moe-mas --timeout=600s
        
        # Run production smoke tests
        GREEN_URL=$(kubectl get service quantum-moe-mas-green -n quantum-moe-mas -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        python tests/smoke/test_production.py --url=http://$GREEN_URL
        
        # Switch traffic to green (blue-green swap)
        kubectl patch service quantum-moe-mas -n quantum-moe-mas -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and verify
        sleep 30
        PROD_URL=$(kubectl get service quantum-moe-mas -n quantum-moe-mas -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        python tests/smoke/test_production.py --url=http://$PROD_URL
        
        # Clean up old blue deployment
        kubectl delete deployment quantum-moe-mas-blue -n quantum-moe-mas --ignore-not-found=true
        kubectl delete service quantum-moe-mas-blue -n quantum-moe-mas --ignore-not-found=true

  # Notification and Reporting
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite, performance-tests, container-security]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#quantum-moe-mas'
        text: '✅ CI/CD Pipeline completed successfully for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#quantum-moe-mas'
        text: '❌ CI/CD Pipeline failed for ${{ github.ref }}. Check the logs for details.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}